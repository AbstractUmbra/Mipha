[project]
name = "Mipha"
version = "2.0.0"
description = "A fun and lightweight Discord bot for personal use."
authors = [{ name = "Alex NÃ¸rgaard", email = "umbra@abstractumbra.dev" }]
dependencies = [
    "discord-py[speedup,voice] @ git+https://github.com/Rapptz/discord.py.git@master",
    "hondana[speed] @ git+https://github.com/AbstractUmbra/Hondana.git@main",
    "discord-ext-menus @ git+https://github.com/Rapptz/discord-ext-menus@master",
    "rcon @ git+https://github.com/conqp/rcon.git@master",
    "asqlite @ git+https://github.com/Rapptz/asqlite.git@master",
    "python-a2s @ git+https://github.com/Yepoleb/python-a2s.git@typing",
    "pykakasi @ git+https://codeberg.org/miurahr/pykakasi.git@master",
    "mystbin-py",
    "jishaku",
    "asyncpg",
    "psutil",
    "lru-dict",
    "beautifulsoup4",
    "Pillow",
    "pygit2",
    "yt-dlp",
    "typing-extensions",
    "parsedatetime",
    "python-dateutil",
    "lxml==5.3.0",
    "legofy",
    "mcrcon",
    "tabulate",
    "imagetext-py",
    "orjson",
    "uvloop",
]
requires-python = "<4.0,>=3.12"
readme = "README.md"
license = { text = "MPL 2.0" }

[tool.pdm]
distribution = false

[dependency-groups]
dev = ["ruff", "asyncpg-stubs", "pre-commit"]

[tool.pdm.build]
includes = []

[tool.ruff]
line-length = 125
target-version = "py312"

[tool.ruff.lint]
preview = true
select = [
    "A",
    "ANN",
    "ASYNC",
    "B",
    "BLE",
    "C4",
    "COM",
    "DTZ",
    "E",
    "EM",
    "ERA",
    "F",
    "FA",
    "FBT",
    "FURB",
    "G",
    "I",
    "INP",
    "ISC",
    "NPY",
    "PD",
    "PERF",
    "PGH",
    "PIE",
    "PLC",
    "PLE",
    "PLW",
    "PTH",
    "PYI",
    "Q",
    "Q003",
    "RET",
    "RSE",
    "RUF",
    "S",
    "SIM",
    "SLOT",
    "T20",
    "TC",
    "TID",
    "TRY",
    "UP",
    "YTT",
    # "DOC", # not in a bot, please
]
ignore = [
    "ANN401",
    "ASYNC109", # dpy commonly uses this parameter
    "EM101",    # in this case this is okay
    "F401",
    "F402",
    "F403",
    "F405",
    "INP001",   # due to how I load modules this results in annoyances
    "PD011",    # this is not a numpy codebase
    "PERF203",
    "PLC0414",  # pyright ruling for `as` imports needed
    "Q000",
    "RUF001",
    "RUF009",
    "S101",     # assert is used for type checking in this codebase
    "SIM105",
    "TRY003",   # over-eager rule
    "TRY301",   # unrealistic rule
    "UP034",
    "UP038",
]
unfixable = [
    "E501", # line length handled in other ways by ruff format
    "ERA",  # Don't delete commented out code
]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.isort]
split-on-trailing-comma = true
combine-as-imports = true

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false
parametrize-names-type = "csv"

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"

[tool.ruff.lint.flake8-tidy-imports.banned-api]
# https://discuss.python.org/t/problems-with-typeis/55410/6
# https://discuss.python.org/t/problems-with-typeis/55410/46
# Until what can go into a TypeIs/TypeGuard changes, these are just dangerous.
"typing.TypeIs".msg = "TypeIs is fundamentally unsafe, even when using it as described to be safe"
"typing.TypeGuard".msg = "TypeGuard is fundamentally unsafe"
"typing_extensions.TypeIs".msg = "TypeIs is fundamentally unsafe, even when using it as described to be safe"
"typing_extensions.TypeGuard".msg = "TypeGuard is fundamentally unsafe"

[tool.pyright]
useLibraryCodeForTypes = true
typeCheckingMode = "basic"
pythonVersion = "3.12"
strictListInference = true
strictDictionaryInference = true
strictSetInference = true
strictParameterNoneValue = true
reportMissingImports = "error"
reportUnusedImport = "error"
reportUnusedClass = "error"
reportUnusedFunction = "error"
reportUnusedVariable = "error"
reportUnusedExpression = "error"
reportGeneralTypeIssues = "error"
reportDuplicateImport = "error"
reportUntypedFunctionDecorator = "error"
reportUnnecessaryTypeIgnoreComment = "warning"
